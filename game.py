from random import choice
from datetime import datetime
from aiogram import F, Bot, Router
from aiogram.exceptions import TelegramForbiddenError
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, ReplyKeyboardRemove, InputMediaPhoto
from themes import THEME_DICT, THEME_NAMES, THEMES, Theme
from config import users, ADMINS, LOG_GROUP_ID
from hangs import STAGES
from keyboards import Keyboards
from stickers import win_stickers
from strings import Strings, Game
from units import find_all_indices, is_it_a_win, find_place, send_log
from words import get_word_list
from filters import IsTheLetterRight, IsTheLetterWrong
from mongo_units import MongoUnits
from achievement_units import AchievementUnits
from constants import ACHIEVEMENTS
import asyncio

router = Router()


class GameProcess(StatesGroup):
    game = State()


class MailingProcess(StatesGroup):
    mailing = State()


@router.message(F.from_user.id.in_(ADMINS), F.text.lower() == '—Ä–∞—Å—Å—ã–ª–∫–∞')
async def mailing_starter(message: Message, state: FSMContext):
    await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—Å–µ–º —Ä–∞–∑–æ—Å–ª–∞—Ç—å.')
    await state.set_state(MailingProcess.mailing)


@router.message(MailingProcess.mailing)
async def mailing_process(message: Message, state: FSMContext, bot: Bot):
    for user in users.find():
        chat_id = user['user_id']
        try:
            if chat_id != message.from_user.id:
                await message.send_copy(chat_id=chat_id)
        except TelegramForbiddenError:
            await bot.send_message(text=f'<u>{user['full_name']}</u> (id: <code>{chat_id}</code>) '
                                        f'–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ –∏ –±—É–¥–µ—Ç —É–¥–∞–ª—ë–Ω –∏–∑ –ë–î.\n',
                                   chat_id=LOG_GROUP_ID)
            users.delete_one(filter={'user_id': chat_id})
        await asyncio.sleep(0.05)
    await message.answer('–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.')
    await state.clear()


@router.message(CommandStart())
async def command_start_handler(message: Message, bot: Bot):
    await message.answer(text=f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}, –∏ –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É '<b>–í–∏—Å–µ–ª—å–Ω–∏—Ü–∞</b>'. "
                              f"–ù–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å –∏–≥—Ä—É', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É.",
                         reply_markup=Keyboards.main_menu())
    user_id = message.from_user.id
    full_name = message.from_user.full_name
    if not users.find_one({'user_id': user_id}):
        def theme_inserter(themes: list) -> dict:
            theme_dict = {}
            for theme in themes:
                theme_dict[theme.used_words] = []
            return theme_dict

        users.insert_one({'user_id': user_id, 'full_name': full_name,
                          'wins': 0, 'losses': 0, 'WL': 0,
                          'win_streak': 0, 'max_win_streak': 0,
                          'achievements': ACHIEVEMENTS} | theme_inserter(THEMES))

        await send_log('–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è', message, bot)
        return
    await send_log('–Ω–∞–∂–∞–ª –Ω–∞ —Å—Ç–∞—Ä—Ç', message, bot)


@router.message(Command('profile'))
@router.message(F.text == Strings.PROFILE_BUTTON)
async def profile_handler(message: Message, bot: Bot):
    user_id = message.from_user.id
    info = users.find_one({'user_id': user_id})
    achievements_amount = AchievementUnits.achievements_generator(user_id).count('‚úÖ')
    await message.answer(text=f'<blockquote>üë§ {info["full_name"]}</blockquote>\n\n'
                              f'„Ä∞Ô∏è <i>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</i> „Ä∞Ô∏è\n\n'
                              f'üìØ –ü–æ–±–µ–¥—ã: <b>{info["wins"]}</b>\n'
                              f'‚ò†Ô∏è –ü–æ—Ä–∞–∂–µ–Ω–∏—è: <b>{info["losses"]}</b>\n'
                              f'üìä –í–∏–Ω—Ä–µ–π—Ç: <b>{info["WL"]}</b>\n'
                              f'üî• –í–∏–Ω—Å—Ç—Ä–∏–∫: <b>{info["win_streak"]}</b>\n'
                              f'‚ö°Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–∏–Ω—Å—Ç—Ä–∏–∫: <b>{info["max_win_streak"]}</b>\n'
                              f'üß© –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è: <b>{achievements_amount} / {len(ACHIEVEMENTS)}</b>\n\n'
                              f'„Ä∞Ô∏è <i>–ú–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ</i> „Ä∞Ô∏è\n\n'
                              f'üìØ –ü–æ –ø–æ–±–µ–¥–∞–º: <b>{find_place("wins", user_id)}</b>\n'
                              f'üìä –ü–æ –≤–∏–Ω—Ä–µ–π—Ç—É: <b>{find_place("WL", user_id)}</b>\n'
                              f'üî• –ü–æ –≤–∏–Ω—Å—Ç—Ä–∏–∫—É: <b>{find_place("max_win_streak", user_id)}</b>',
                         reply_markup=Keyboards.main_menu())
    await send_log('–∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç—Å—è —Å–æ–±–æ–π –≤ –ø—Ä–æ—Ñ–∏–ª–µ', message, bot)


# TODO: –∏—Å–∫–ª—é—á–∏—Ç—å –ø–æ–ø—ã—Ç–∫–∏ –≤—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã –≤–æ –≤—Ä–µ–º—è —É–≥–∞–¥—ã–≤–∞–Ω–∏—è
# TODO: –ø–æ–º–µ–Ω—è—Ç—å —Ç–µ–∫—Å—Ç
@router.message(Command('new_game'))
@router.message(F.text == Strings.NEW_GAME_BUTTON)
async def new_game_handler(message: Message, bot: Bot):
    user_id = message.from_user.id
    user = users.find_one(filter={'user_id': user_id})
    achievements = user['achievements']

    for theme in THEMES:
        if theme.used_words not in user:
            users.update_one(filter={'user_id': user_id},
                             update={'$set': {f'{theme.used_words}': []}})

    for achievement in ACHIEVEMENTS:
        if achievement not in achievements:
            achievements[achievement] = ACHIEVEMENTS[achievement]
    users.update_one(filter={'user_id': user_id},
                     update={'$set': {'achievements': achievements}})

    await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É',
                         reply_markup=Keyboards.themes())
    await send_log('–≤—ã–±–∏—Ä–∞–µ—Ç —Ç–µ–º—É –¥–ª—è –∏–≥—Ä—ã', message, bot)


# TODO: –ø–æ–º–µ–Ω—è—Ç—å —Ç–µ–∫—Å—Ç
@router.message(F.text == Strings.BACK_BUTTON)
async def main_menu_handler(message: Message, bot: Bot) -> None:
    await message.answer(text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                         reply_markup=Keyboards.main_menu())
    await send_log('–≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', message, bot)


@router.message(F.text.in_(THEME_NAMES))
async def start_game_handler(message: Message, state: FSMContext, bot: Bot) -> None:
    user_id = message.from_user.id
    theme: Theme = THEME_DICT.get(message.text)
    await state.update_data(theme=message.text)
    words = get_word_list(theme.words)
    used_words = users.find_one({'user_id': user_id})[theme.used_words]

    if len(words) == len(used_words):
        await message.answer(text='–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —Å–ª–æ–≤–∞ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
                             reply_markup=Keyboards.themes())
        await send_log(f'–æ—Ç—ã–≥—Ä–∞–ª –≤—Å–µ —Å–ª–æ–≤–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {theme.name}', message, bot)
        return

    loading_message = await message.answer(text='–ó–∞–≥—Ä—É–∑–∫–∞...',
                                           reply_markup=ReplyKeyboardRemove())
    await bot.delete_message(chat_id=loading_message.chat.id,
                             message_id=loading_message.message_id)

    word = choice(words)
    while word in used_words:
        word = choice(words)
    print(word)
    # TODO: —É–±—Ä–∞—Ç—å –ø—Ä–∏–Ω—Ç –ø–æ—Å–ª–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    await state.update_data(word=word)
    text_word = ['_'] * len(word)
    await state.update_data(text_word=text_word)
    hang_state = -1
    await state.update_data(hang_state=hang_state)
    wrong_letters = []
    await state.update_data(wrong_letters=wrong_letters)
    answer = await message.answer_photo(photo=STAGES[hang_state],
                                        caption=f'–ó–∞–≥–∞–¥–∞–Ω–æ —Å–ª–æ–≤–æ –∏–∑ {len(word)} –±—É–∫–≤.\n'
                                                f'{Strings.LIVES[hang_state]}\n\n'
                                                f'{" ".join(text_word).replace('_', '‚óªÔ∏è')}\n')
    users.update_one(filter={'user_id': user_id},
                     update={'$push': {f'{theme.used_words}': word}})
    chat_id = answer.chat.id
    await state.update_data(chat_id=chat_id)
    message_id = answer.message_id
    await state.update_data(message_id=message_id)
    start_time = datetime.now()
    await state.update_data(start_time=start_time)
    await state.set_state(GameProcess.game)
    await send_log(f'–Ω–∞—á–∞–ª –∏–≥—Ä—É –≤ —Ç–µ–º–µ: {theme.name}', message, bot)


@router.message(IsTheLetterRight(), F.text.len() == 1, GameProcess.game)
async def right_letter(message: Message, bot: Bot, state: FSMContext, **data):
    user_id = message.from_user.id
    letter = message.text.upper()
    await message.delete()
    for i in find_all_indices(data['word'], letter):
        data['text_word'][i] = letter

    if is_it_a_win(data['word'], data['text_word']):
        await bot.delete_message(chat_id=data['chat_id'],
                                 message_id=data['message_id'])
        await bot.send_sticker(data['chat_id'], choice(win_stickers))
        await message.answer_photo(photo=STAGES[data['hang_state']],
                                   caption=Game.WIN_TEXT.format(word=data['word'],
                                                                lives=Strings.LIVES[data['hang_state']],
                                                                wrong_letters=" ".join(data['wrong_letters'])),
                                   message_effect_id='5046509860389126442',
                                   reply_markup=Keyboards.main_menu())

        MongoUnits.win_count_increase(user_id)
        MongoUnits.wl_and_mws_update(user_id)
        await AchievementUnits.success_series_check(data, bot)
        await AchievementUnits.champion_series_check(data, bot)
        await AchievementUnits.legendary_winner_check(data, bot)
        await AchievementUnits.without_a_miss_check(data, bot)
        await AchievementUnits.bladerunner_check(data, bot)
        await AchievementUnits.da_vinci_code_check(data, bot)
        await AchievementUnits.cartographer_check(data, bot)
        await AchievementUnits.movie_fan_check(data, bot)
        await AchievementUnits.professional_check(data, bot)
        await AchievementUnits.flash_check(data, bot)
        await send_log('–ø–æ–±–µ–¥–∏–ª', message, bot)

        await state.clear()
    else:
        await state.update_data(text_word=data['text_word'])
        await bot.edit_message_caption(caption=f'–í—ã –æ—Ç–≥–∞–¥–∞–ª–∏ –±—É–∫–≤—É.\n'
                                               f'–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã –Ω–∞ 1 —à–∞–≥ –±–ª–∏–∂–µ –∫ –ø–æ–±–µ–¥–µ.\n\n'
                                               f'{Strings.LIVES[data['hang_state']]}\n\n'
                                               f'{" ".join(data['text_word']).replace('_', '‚óªÔ∏è')}\n\n'
                                               f'–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –±—É–∫–≤—ã: {" ".join(data['wrong_letters'])}',
                                       chat_id=data['chat_id'],
                                       message_id=data['message_id'])
        await AchievementUnits.instant_insight_check(data, bot)
        await send_log('–æ—Ç–≥–∞–¥–∞–ª –±—É–∫–≤—É', message, bot)


@router.message(IsTheLetterWrong(), F.text.len() == 1, GameProcess.game)
async def wrong_letter(message: Message, state: FSMContext, bot: Bot, **data):
    await message.delete()
    user_id = message.from_user.id
    letter = message.text.upper()

    if letter in data['wrong_letters']:
        return
    data['wrong_letters'].append(letter)
    await state.update_data(wrong_letters=data['wrong_letters'])
    data['hang_state'] -= 1
    await state.update_data(hang_state=data['hang_state'])
    if data['hang_state'] != -7:
        media = InputMediaPhoto(media=STAGES[data['hang_state']],
                                caption=f'–í—ã –Ω–µ –æ—Ç–≥–∞–¥–∞–ª–∏ –±—É–∫–≤—É.\n'
                                        f'–°–æ–∂–∞–ª–µ—é, –≤—ã –Ω–∞ 1 —à–∞–≥ –±–ª–∏–∂–µ –∫ –ø–æ—Ä–∞–∂–µ–Ω–∏—é.\n\n'
                                        f'{Strings.LIVES[data['hang_state']]}\n\n'
                                        f'{" ".join(data['text_word']).replace('_', '‚óªÔ∏è')}\n\n'
                                        f'–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –±—É–∫–≤—ã: {" ".join(data['wrong_letters'])}')
        await bot.edit_message_media(media=media,
                                     chat_id=data['chat_id'],
                                     message_id=data['message_id'])
        await send_log('–Ω–µ –æ—Ç–≥–∞–¥–∞–ª –±—É–∫–≤—É', message, bot)
    else:
        await bot.delete_message(chat_id=data['chat_id'],
                                 message_id=data['message_id'])

        await message.answer_photo(photo=STAGES[data['hang_state']],
                                   caption=f'–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. :(\n'
                                           f'{Strings.LIVES[data['hang_state']]}\n'
                                           f'–°–ª–æ–≤–æ –±—ã–ª–æ: {data['word']}\n'
                                           f'–ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.\n\n'
                                           f'–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –±—É–∫–≤—ã: {" ".join(data['wrong_letters'])}',
                                   reply_markup=Keyboards.main_menu())
        await AchievementUnits.complete_disaster_check(data, bot)
        MongoUnits.lose_count_increase(user_id)
        MongoUnits.wl_negative_update(user_id)
        await AchievementUnits.success_series_check(data, bot)
        await AchievementUnits.champion_series_check(data, bot)
        await send_log('–ø—Ä–æ–∏–≥—Ä–∞–ª', message, bot)

        await state.clear()


@router.message()
async def message_deleter(message: Message):
    await message.delete()
